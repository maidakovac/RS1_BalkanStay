// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RS1_2024_25.API.Data;

#nullable disable

namespace RS1_2024_25.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RS1_2024_25.API.Data.Amenity", b =>
                {
                    b.Property<int>("AmenityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AmenityID"));

                    b.Property<string>("AmenityText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AmenityID");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Apartment", b =>
                {
                    b.Property<int>("ApartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApartmentId"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PricePerNight")
                        .HasColumnType("int");

                    b.HasKey("ApartmentId");

                    b.HasIndex("CityId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.ApartmentAmenity", b =>
                {
                    b.Property<int>("ApartmentAmenityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApartmentAmenityID"));

                    b.Property<int>("AmenityID")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.HasKey("ApartmentAmenityID");

                    b.HasIndex("AmenityID");

                    b.HasIndex("ApartmentId");

                    b.ToTable("ApartmentAmenities");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.ApartmentImage", b =>
                {
                    b.Property<int>("ApartmentImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApartmentImageID"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ImageID")
                        .HasColumnType("int");

                    b.HasKey("ApartmentImageID");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("ImageID");

                    b.ToTable("ApartmentImages");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.ApartmentRule", b =>
                {
                    b.Property<int>("ApartmentRuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApartmentRuleID"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("RuleID")
                        .HasColumnType("int");

                    b.HasKey("ApartmentRuleID");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("RuleID");

                    b.ToTable("ApartmentRules");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.ApartmentToiletry", b =>
                {
                    b.Property<int>("ApartmentToiletryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApartmentToiletryID"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ToiletryID")
                        .HasColumnType("int");

                    b.HasKey("ApartmentToiletryID");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("ToiletryID");

                    b.ToTable("ApartmentToiletries");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Favorite", b =>
                {
                    b.Property<int>("FavoriteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("UserAccountID")
                        .HasColumnType("int");

                    b.HasKey("FavoriteID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("UserAccountID");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Image", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageID"));

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ImageID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.ToTable("Account", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.MyAuthenticationToken", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AccountId");

                    b.ToTable("MyAuthenticationTokens");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.TwoFactorAuth", b =>
                {
                    b.Property<int>("TwoFactorAuthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TwoFactorAuthId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AuthToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TwoFactorAuthId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("TwoFactorAuths");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Gender", b =>
                {
                    b.Property<int>("GenderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderID");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.OwnerApartment", b =>
                {
                    b.Property<int>("OwnerApartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerApartmentID"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("OwnerID")
                        .HasColumnType("int");

                    b.HasKey("OwnerApartmentID");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("OwnerID");

                    b.ToTable("OwnerApartments");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.OwnerReview", b =>
                {
                    b.Property<int>("OwnerReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerReviewID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("OwnerID")
                        .HasColumnType("int");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OwnerReviewID");

                    b.HasIndex("AccountID");

                    b.HasIndex("OwnerID");

                    b.ToTable("OwnerReviews");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("UserAccountID")
                        .HasColumnType("int");

                    b.HasKey("ReservationID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("UserAccountID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserAccountID")
                        .HasColumnType("int");

                    b.HasKey("ReviewID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("UserAccountID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Rule", b =>
                {
                    b.Property<int>("RuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RuleID"));

                    b.Property<string>("RuleText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Toiletry", b =>
                {
                    b.Property<int>("ToiletryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToiletryID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ToiletryID");

                    b.ToTable("Toiletries");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.Administrator", b =>
                {
                    b.HasBaseType("RS1_2024_25.API.Data.Models.Auth.Account");

                    b.ToTable("Administrator", (string)null);
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.User", b =>
                {
                    b.HasBaseType("RS1_2024_25.API.Data.Models.Auth.Account");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CityID");

                    b.HasIndex("GenderID");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Owner", b =>
                {
                    b.HasBaseType("RS1_2024_25.API.Data.Models.Auth.Account");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CityID");

                    b.HasIndex("GenderID");

                    b.ToTable("Owner", (string)null);
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Apartment", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.City", "City")
                        .WithMany("Apartments")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("City");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.ApartmentAmenity", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Amenity", "Amenity")
                        .WithMany("ApartmentAmenities")
                        .HasForeignKey("AmenityID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Apartment", "Apartment")
                        .WithMany("ApartmentAmenities")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.ApartmentImage", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Apartment", "Apartment")
                        .WithMany("ApartmentImages")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Image", "Image")
                        .WithMany("ApartmentImages")
                        .HasForeignKey("ImageID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.ApartmentRule", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Apartment", "Apartment")
                        .WithMany("ApartmentRules")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Rule", "Rule")
                        .WithMany("ApartmentRules")
                        .HasForeignKey("RuleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.ApartmentToiletry", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Apartment", "Apartment")
                        .WithMany("ApartmentToiletries")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Toiletry", "Toiletry")
                        .WithMany("ApartmentToiletries")
                        .HasForeignKey("ToiletryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Toiletry");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Favorite", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.User", null)
                        .WithMany("Favorites")
                        .HasForeignKey("UserAccountID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.MyAuthenticationToken", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.TwoFactorAuth", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.Account", "Account")
                        .WithOne("TwoFactorAuth")
                        .HasForeignKey("RS1_2024_25.API.Data.Models.Auth.TwoFactorAuth", "AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.City", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.OwnerApartment", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Apartment", "Apartment")
                        .WithMany("OwnerApartments")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Owner", "Owner")
                        .WithMany("OwnerApartments")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.OwnerReview", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Owner", "Owner")
                        .WithMany("OwnerReviews")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Reservation", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Apartment", "Apartment")
                        .WithMany("Reservations")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.User", null)
                        .WithMany("Reservations")
                        .HasForeignKey("UserAccountID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Review", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.User", null)
                        .WithMany("Reviews")
                        .HasForeignKey("UserAccountID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.Administrator", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.Account", null)
                        .WithOne()
                        .HasForeignKey("RS1_2024_25.API.Data.Models.Auth.Administrator", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.User", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.Account", null)
                        .WithOne()
                        .HasForeignKey("RS1_2024_25.API.Data.Models.Auth.User", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Owner", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.Account", null)
                        .WithOne()
                        .HasForeignKey("RS1_2024_25.API.Data.Owner", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Amenity", b =>
                {
                    b.Navigation("ApartmentAmenities");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Apartment", b =>
                {
                    b.Navigation("ApartmentAmenities");

                    b.Navigation("ApartmentImages");

                    b.Navigation("ApartmentRules");

                    b.Navigation("ApartmentToiletries");

                    b.Navigation("OwnerApartments");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Image", b =>
                {
                    b.Navigation("ApartmentImages");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.Account", b =>
                {
                    b.Navigation("TwoFactorAuth")
                        .IsRequired();
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.City", b =>
                {
                    b.Navigation("Apartments");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Rule", b =>
                {
                    b.Navigation("ApartmentRules");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Toiletry", b =>
                {
                    b.Navigation("ApartmentToiletries");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Owner", b =>
                {
                    b.Navigation("OwnerApartments");

                    b.Navigation("OwnerReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
