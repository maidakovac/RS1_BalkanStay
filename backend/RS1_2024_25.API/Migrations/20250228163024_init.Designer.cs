// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RS1_2024_25.API.Data;

#nullable disable

namespace RS1_2024_25.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250228163024_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RS1_2024_25.API.Data.Amenity", b =>
                {
                    b.Property<int>("AmenityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AmenityID"));

                    b.Property<string>("AmenityText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AmenityID");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            AmenityID = 1,
                            AmenityText = "Besplatan parking"
                        },
                        new
                        {
                            AmenityID = 2,
                            AmenityText = "Klima uređaj"
                        },
                        new
                        {
                            AmenityID = 3,
                            AmenityText = "Veš mašina"
                        },
                        new
                        {
                            AmenityID = 4,
                            AmenityText = "Pogled s terase"
                        },
                        new
                        {
                            AmenityID = 5,
                            AmenityText = "Bazen"
                        },
                        new
                        {
                            AmenityID = 6,
                            AmenityText = "Sauna"
                        });
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Apartment", b =>
                {
                    b.Property<int>("ApartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApartmentId"));

                    b.Property<int?>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PricePerNight")
                        .HasColumnType("int");

                    b.HasKey("ApartmentId");

                    b.HasIndex("AccountID");

                    b.HasIndex("CityId");

                    b.ToTable("Apartments");

                    b.HasData(
                        new
                        {
                            ApartmentId = 1,
                            Adress = "Maršala Tita 25, Sarajevo",
                            CityId = 1,
                            Description = "A stylish and modern apartment in a prime location, perfect for travelers.",
                            Name = "Apartment Marshal",
                            PricePerNight = 50
                        },
                        new
                        {
                            ApartmentId = 2,
                            Adress = "Ferhadija 12, Sarajevo",
                            CityId = 1,
                            Description = "Charming apartment near Baščaršija with traditional decor.",
                            Name = "Old Town Retreat",
                            PricePerNight = 65
                        },
                        new
                        {
                            ApartmentId = 3,
                            Adress = "Zmaja od Bosne 15, Sarajevo",
                            CityId = 1,
                            Description = "Modern apartment with a beautiful city view.",
                            Name = "City Panorama Apartment",
                            PricePerNight = 80
                        },
                        new
                        {
                            ApartmentId = 4,
                            Adress = "Rade Bitange 8, Mostar",
                            CityId = 2,
                            Description = "A cozy and charming space with elegant decor.",
                            Name = "Apartment Charm",
                            PricePerNight = 70
                        },
                        new
                        {
                            ApartmentId = 5,
                            Adress = "Maršala Tita 9, Mostar",
                            CityId = 2,
                            Description = "Stunning apartment with a direct view of the Old Bridge.",
                            Name = "Bridge View Apartment",
                            PricePerNight = 90
                        },
                        new
                        {
                            ApartmentId = 6,
                            Adress = "Gojka Vukovića 21, Mostar",
                            CityId = 2,
                            Description = "Quiet and relaxing stay in the heart of Herzegovina.",
                            Name = "Herzegovina Hideaway",
                            PricePerNight = 75
                        },
                        new
                        {
                            ApartmentId = 7,
                            Adress = "Slatina 10, Tuzla",
                            CityId = 3,
                            Description = "Bright and spacious apartment with plenty of natural light.",
                            Name = "Apartment Sun",
                            PricePerNight = 50
                        },
                        new
                        {
                            ApartmentId = 8,
                            Adress = "Trg Slobode 5, Tuzla",
                            CityId = 3,
                            Description = "Apartment next to the famous Pannonian Lakes.",
                            Name = "Central Park Apartment",
                            PricePerNight = 60
                        },
                        new
                        {
                            ApartmentId = 9,
                            Adress = "Aleja Alije Izetbegovića 16, Tuzla",
                            CityId = 3,
                            Description = "Well-furnished and comfortable apartment for travelers.",
                            Name = "Modern City Stay",
                            PricePerNight = 55
                        },
                        new
                        {
                            ApartmentId = 10,
                            Adress = "Ilica 42, Zagreb",
                            CityId = 4,
                            Description = "A luxury apartment with high-end amenities.",
                            Name = "Apartment Exclusive",
                            PricePerNight = 150
                        },
                        new
                        {
                            ApartmentId = 11,
                            Adress = "Savska 77, Zagreb",
                            CityId = 4,
                            Description = "Penthouse with a skyline view of Zagreb.",
                            Name = "Zagreb Skyline",
                            PricePerNight = 180
                        },
                        new
                        {
                            ApartmentId = 12,
                            Adress = "Radićeva 6, Zagreb",
                            CityId = 4,
                            Description = "Charming old town apartment near historical landmarks.",
                            Name = "Upper Town Retreat",
                            PricePerNight = 140
                        },
                        new
                        {
                            ApartmentId = 13,
                            Adress = "Obala 45, Rijeka",
                            CityId = 5,
                            Description = "A luxurious apartment right by the Adriatic Sea.",
                            Name = "Seaside Escape",
                            PricePerNight = 120
                        },
                        new
                        {
                            ApartmentId = 14,
                            Adress = "Korzo 10, Rijeka",
                            CityId = 5,
                            Description = "Beautiful apartment overlooking the Rijeka harbor.",
                            Name = "Port View Apartment",
                            PricePerNight = 130
                        },
                        new
                        {
                            ApartmentId = 15,
                            Adress = "Verdijeva 3, Rijeka",
                            CityId = 5,
                            Description = "Stay in an elegant historic coastal apartment.",
                            Name = "Historic Coastal Home",
                            PricePerNight = 110
                        },
                        new
                        {
                            ApartmentId = 16,
                            Adress = "Bjelašnica 12, Pula",
                            CityId = 6,
                            Description = "A cozy retreat with a breathtaking mountain view.",
                            Name = "Mountain View Lodge",
                            PricePerNight = 80
                        },
                        new
                        {
                            ApartmentId = 17,
                            Adress = "Flavijevska 1, Pula",
                            CityId = 6,
                            Description = "Apartment next to the famous Pula Arena.",
                            Name = "Roman Amphitheater Stay",
                            PricePerNight = 95
                        },
                        new
                        {
                            ApartmentId = 18,
                            Adress = "Verudela 20, Pula",
                            CityId = 6,
                            Description = "Enjoy the Adriatic coast in this beachfront apartment.",
                            Name = "Pula Beachfront Getaway",
                            PricePerNight = 100
                        },
                        new
                        {
                            ApartmentId = 19,
                            Adress = "Knez Mihailova 28, Beograd",
                            CityId = 7,
                            Description = "Modern apartment in the city center.",
                            Name = "Belgrade Central",
                            PricePerNight = 110
                        },
                        new
                        {
                            ApartmentId = 20,
                            Adress = "Bulevar Zorana Đinđića 35, Beograd",
                            CityId = 7,
                            Description = "Relaxing stay by the Sava River.",
                            Name = "Riverside Apartment",
                            PricePerNight = 120
                        },
                        new
                        {
                            ApartmentId = 21,
                            Adress = "Skadarska 9, Beograd",
                            CityId = 7,
                            Description = "A unique apartment in the famous bohemian quarter.",
                            Name = "Luxury Skadarlija Stay",
                            PricePerNight = 130
                        },
                        new
                        {
                            ApartmentId = 22,
                            Adress = "Bulevar Oslobođenja 22, Novi Sad",
                            CityId = 8,
                            Description = "Modern loft in the heart of the city.",
                            Name = "Urban Loft",
                            PricePerNight = 95
                        },
                        new
                        {
                            ApartmentId = 23,
                            Adress = "Podgradje 3, Novi Sad",
                            CityId = 8,
                            Description = "Stay next to the historical Petrovaradin Fortress.",
                            Name = "Petrovaradin Fortress Stay",
                            PricePerNight = 85
                        },
                        new
                        {
                            ApartmentId = 24,
                            Adress = "Kej žrtava racije 10, Novi Sad",
                            CityId = 8,
                            Description = "Relax by the beautiful Danube River.",
                            Name = "River Danube Apartment",
                            PricePerNight = 90
                        },
                        new
                        {
                            ApartmentId = 25,
                            Adress = "Stari Grad 17, Skopje",
                            CityId = 9,
                            Description = "Stay in a beautifully restored historic building.",
                            Name = "Historic Downtown Apartment",
                            PricePerNight = 70
                        },
                        new
                        {
                            ApartmentId = 26,
                            Adress = "Keј 13 Noemvri 5, Skopje",
                            CityId = 9,
                            Description = "Perfect location next to the iconic Stone Bridge.",
                            Name = "Stone Bridge View",
                            PricePerNight = 75
                        },
                        new
                        {
                            ApartmentId = 27,
                            Adress = "Macedonia Square 1, Skopje",
                            CityId = 9,
                            Description = "Spacious and elegant suite in the city center.",
                            Name = "Luxury Skopje Suite",
                            PricePerNight = 100
                        },
                        new
                        {
                            ApartmentId = 28,
                            Adress = "Skyline Tower, Vasilissis Sofias Ave 10, Athens",
                            CityId = 19,
                            Description = "Exclusive penthouse with panoramic views.",
                            Name = "Luxury Penthouse",
                            PricePerNight = 250
                        },
                        new
                        {
                            ApartmentId = 29,
                            Adress = "Dionysiou Areopagitou 17, Athens",
                            CityId = 19,
                            Description = "Unforgettable experience with an Acropolis view.",
                            Name = "Acropolis View Apartment",
                            PricePerNight = 220
                        },
                        new
                        {
                            ApartmentId = 30,
                            Adress = "Adrianou 45, Athens",
                            CityId = 19,
                            Description = "Traditional Athenian home in the charming Plaka district.",
                            Name = "Plaka Boutique Apartment",
                            PricePerNight = 190
                        });
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.ApartmentAmenity", b =>
                {
                    b.Property<int>("ApartmentAmenityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApartmentAmenityID"));

                    b.Property<int>("AmenityID")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.HasKey("ApartmentAmenityID");

                    b.HasIndex("AmenityID");

                    b.HasIndex("ApartmentId");

                    b.ToTable("ApartmentAmenities");

                    b.HasData(
                        new
                        {
                            ApartmentAmenityID = 1,
                            AmenityID = 1,
                            ApartmentId = 1
                        },
                        new
                        {
                            ApartmentAmenityID = 2,
                            AmenityID = 2,
                            ApartmentId = 2
                        },
                        new
                        {
                            ApartmentAmenityID = 3,
                            AmenityID = 3,
                            ApartmentId = 3
                        },
                        new
                        {
                            ApartmentAmenityID = 4,
                            AmenityID = 4,
                            ApartmentId = 4
                        },
                        new
                        {
                            ApartmentAmenityID = 5,
                            AmenityID = 5,
                            ApartmentId = 2
                        });
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.ApartmentImage", b =>
                {
                    b.Property<int>("ApartmentImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApartmentImageID"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ImageID")
                        .HasColumnType("int");

                    b.HasKey("ApartmentImageID");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("ImageID");

                    b.ToTable("ApartmentImages");

                    b.HasData(
                        new
                        {
                            ApartmentImageID = 1,
                            ApartmentId = 1,
                            ImageID = 1
                        },
                        new
                        {
                            ApartmentImageID = 2,
                            ApartmentId = 2,
                            ImageID = 2
                        },
                        new
                        {
                            ApartmentImageID = 3,
                            ApartmentId = 3,
                            ImageID = 3
                        },
                        new
                        {
                            ApartmentImageID = 4,
                            ApartmentId = 4,
                            ImageID = 4
                        },
                        new
                        {
                            ApartmentImageID = 5,
                            ApartmentId = 5,
                            ImageID = 5
                        },
                        new
                        {
                            ApartmentImageID = 6,
                            ApartmentId = 6,
                            ImageID = 1
                        },
                        new
                        {
                            ApartmentImageID = 7,
                            ApartmentId = 7,
                            ImageID = 2
                        },
                        new
                        {
                            ApartmentImageID = 8,
                            ApartmentId = 8,
                            ImageID = 3
                        },
                        new
                        {
                            ApartmentImageID = 9,
                            ApartmentId = 9,
                            ImageID = 4
                        },
                        new
                        {
                            ApartmentImageID = 10,
                            ApartmentId = 10,
                            ImageID = 5
                        },
                        new
                        {
                            ApartmentImageID = 11,
                            ApartmentId = 11,
                            ImageID = 1
                        },
                        new
                        {
                            ApartmentImageID = 12,
                            ApartmentId = 12,
                            ImageID = 2
                        },
                        new
                        {
                            ApartmentImageID = 13,
                            ApartmentId = 13,
                            ImageID = 3
                        },
                        new
                        {
                            ApartmentImageID = 14,
                            ApartmentId = 14,
                            ImageID = 4
                        },
                        new
                        {
                            ApartmentImageID = 15,
                            ApartmentId = 15,
                            ImageID = 5
                        },
                        new
                        {
                            ApartmentImageID = 16,
                            ApartmentId = 16,
                            ImageID = 1
                        },
                        new
                        {
                            ApartmentImageID = 17,
                            ApartmentId = 17,
                            ImageID = 2
                        },
                        new
                        {
                            ApartmentImageID = 18,
                            ApartmentId = 18,
                            ImageID = 3
                        },
                        new
                        {
                            ApartmentImageID = 19,
                            ApartmentId = 19,
                            ImageID = 4
                        },
                        new
                        {
                            ApartmentImageID = 20,
                            ApartmentId = 20,
                            ImageID = 5
                        },
                        new
                        {
                            ApartmentImageID = 21,
                            ApartmentId = 21,
                            ImageID = 1
                        },
                        new
                        {
                            ApartmentImageID = 22,
                            ApartmentId = 22,
                            ImageID = 2
                        },
                        new
                        {
                            ApartmentImageID = 23,
                            ApartmentId = 23,
                            ImageID = 3
                        },
                        new
                        {
                            ApartmentImageID = 24,
                            ApartmentId = 24,
                            ImageID = 4
                        },
                        new
                        {
                            ApartmentImageID = 25,
                            ApartmentId = 25,
                            ImageID = 5
                        },
                        new
                        {
                            ApartmentImageID = 26,
                            ApartmentId = 26,
                            ImageID = 1
                        },
                        new
                        {
                            ApartmentImageID = 27,
                            ApartmentId = 27,
                            ImageID = 2
                        },
                        new
                        {
                            ApartmentImageID = 28,
                            ApartmentId = 28,
                            ImageID = 3
                        },
                        new
                        {
                            ApartmentImageID = 29,
                            ApartmentId = 29,
                            ImageID = 4
                        },
                        new
                        {
                            ApartmentImageID = 30,
                            ApartmentId = 30,
                            ImageID = 5
                        });
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.ApartmentRule", b =>
                {
                    b.Property<int>("ApartmentRuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApartmentRuleID"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("RuleID")
                        .HasColumnType("int");

                    b.HasKey("ApartmentRuleID");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("RuleID");

                    b.ToTable("ApartmentRules");

                    b.HasData(
                        new
                        {
                            ApartmentRuleID = 1,
                            ApartmentId = 1,
                            RuleID = 1
                        },
                        new
                        {
                            ApartmentRuleID = 2,
                            ApartmentId = 2,
                            RuleID = 2
                        },
                        new
                        {
                            ApartmentRuleID = 3,
                            ApartmentId = 3,
                            RuleID = 3
                        },
                        new
                        {
                            ApartmentRuleID = 4,
                            ApartmentId = 1,
                            RuleID = 4
                        },
                        new
                        {
                            ApartmentRuleID = 5,
                            ApartmentId = 4,
                            RuleID = 5
                        });
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.ApartmentToiletry", b =>
                {
                    b.Property<int>("ApartmentToiletryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApartmentToiletryID"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ToiletryID")
                        .HasColumnType("int");

                    b.HasKey("ApartmentToiletryID");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("ToiletryID");

                    b.ToTable("ApartmentToiletries");

                    b.HasData(
                        new
                        {
                            ApartmentToiletryID = 1,
                            ApartmentId = 1,
                            ToiletryID = 1
                        },
                        new
                        {
                            ApartmentToiletryID = 2,
                            ApartmentId = 2,
                            ToiletryID = 2
                        },
                        new
                        {
                            ApartmentToiletryID = 3,
                            ApartmentId = 3,
                            ToiletryID = 3
                        },
                        new
                        {
                            ApartmentToiletryID = 4,
                            ApartmentId = 4,
                            ToiletryID = 4
                        },
                        new
                        {
                            ApartmentToiletryID = 5,
                            ApartmentId = 4,
                            ToiletryID = 5
                        });
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Favorite", b =>
                {
                    b.Property<int>("FavoriteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("UserAccountID")
                        .HasColumnType("int");

                    b.HasKey("FavoriteID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("UserAccountID");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Image", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageID"));

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageID");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageID = 1,
                            ImagePath = "/images/image2.jpg"
                        },
                        new
                        {
                            ImageID = 2,
                            ImagePath = "/images/room1.jpg"
                        },
                        new
                        {
                            ImageID = 3,
                            ImagePath = "/images/toilet2.jpg"
                        },
                        new
                        {
                            ImageID = 4,
                            ImagePath = "/images/room1.jpg"
                        },
                        new
                        {
                            ImageID = 5,
                            ImagePath = "/images/image2.jpg"
                        });
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.ToTable("Account", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.MyAuthenticationToken", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AccountId");

                    b.ToTable("MyAuthenticationTokens");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.TwoFactorAuth", b =>
                {
                    b.Property<int>("TwoFactorAuthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TwoFactorAuthId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AuthToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TwoFactorAuthId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("TwoFactorAuths");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CountryId = 1,
                            Name = "Sarajevo"
                        },
                        new
                        {
                            ID = 2,
                            CountryId = 1,
                            Name = "Mostar"
                        },
                        new
                        {
                            ID = 3,
                            CountryId = 1,
                            Name = "Tuzla"
                        },
                        new
                        {
                            ID = 4,
                            CountryId = 2,
                            Name = "Zagreb"
                        },
                        new
                        {
                            ID = 5,
                            CountryId = 2,
                            Name = "Rijeka"
                        },
                        new
                        {
                            ID = 6,
                            CountryId = 2,
                            Name = "Pula"
                        },
                        new
                        {
                            ID = 7,
                            CountryId = 3,
                            Name = "Beograd"
                        },
                        new
                        {
                            ID = 8,
                            CountryId = 3,
                            Name = "Novi Sad"
                        },
                        new
                        {
                            ID = 9,
                            CountryId = 4,
                            Name = "Skopje"
                        },
                        new
                        {
                            ID = 10,
                            CountryId = 4,
                            Name = "Ohrid"
                        },
                        new
                        {
                            ID = 11,
                            CountryId = 5,
                            Name = "Sofia"
                        },
                        new
                        {
                            ID = 12,
                            CountryId = 5,
                            Name = "Varna"
                        },
                        new
                        {
                            ID = 13,
                            CountryId = 6,
                            Name = "Budva"
                        },
                        new
                        {
                            ID = 14,
                            CountryId = 6,
                            Name = "Bar"
                        },
                        new
                        {
                            ID = 15,
                            CountryId = 6,
                            Name = "Kotor"
                        },
                        new
                        {
                            ID = 16,
                            CountryId = 7,
                            Name = "Tirana"
                        },
                        new
                        {
                            ID = 17,
                            CountryId = 7,
                            Name = "Vlorë"
                        },
                        new
                        {
                            ID = 18,
                            CountryId = 7,
                            Name = "Durrës"
                        },
                        new
                        {
                            ID = 19,
                            CountryId = 8,
                            Name = "Atena"
                        },
                        new
                        {
                            ID = 20,
                            CountryId = 8,
                            Name = "Thessaloniki"
                        },
                        new
                        {
                            ID = 21,
                            CountryId = 8,
                            Name = "Patras"
                        },
                        new
                        {
                            ID = 22,
                            CountryId = 8,
                            Name = "Corfu"
                        });
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Bosna i Hercegovina"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Hrvatska"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Srbija"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Makedonija"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Bugarska"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Crna Gora"
                        },
                        new
                        {
                            ID = 7,
                            Name = "Albanija"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Grčka"
                        });
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Gender", b =>
                {
                    b.Property<int>("GenderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderID");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            GenderID = 1,
                            Name = "Male"
                        },
                        new
                        {
                            GenderID = 2,
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.OwnerReview", b =>
                {
                    b.Property<int>("OwnerReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerReviewID"));

                    b.Property<int>("OwnerID")
                        .HasColumnType("int");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OwnerReviewID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("UserID");

                    b.ToTable("OwnerReviews");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("UserAccountID")
                        .HasColumnType("int");

                    b.HasKey("ReservationID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("UserAccountID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserAccountID")
                        .HasColumnType("int");

                    b.HasKey("ReviewID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("UserAccountID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Rule", b =>
                {
                    b.Property<int>("RuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RuleID"));

                    b.Property<string>("RuleText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleID");

                    b.ToTable("Rules");

                    b.HasData(
                        new
                        {
                            RuleID = 1,
                            RuleText = "Zabranjeno pusenje"
                        },
                        new
                        {
                            RuleID = 2,
                            RuleText = "Zabranjene zabave"
                        },
                        new
                        {
                            RuleID = 3,
                            RuleText = "Dozvoljeni ljubimci"
                        },
                        new
                        {
                            RuleID = 4,
                            RuleText = "Zabranjeno prekoracenje kapaciteta osoba"
                        },
                        new
                        {
                            RuleID = 5,
                            RuleText = "Zabranjeno NESTO"
                        });
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Toiletry", b =>
                {
                    b.Property<int>("ToiletryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToiletryID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ToiletryID");

                    b.ToTable("Toiletries");

                    b.HasData(
                        new
                        {
                            ToiletryID = 1,
                            Name = "Sapun"
                        },
                        new
                        {
                            ToiletryID = 2,
                            Name = "Šampon"
                        },
                        new
                        {
                            ToiletryID = 3,
                            Name = "Regenerator"
                        },
                        new
                        {
                            ToiletryID = 4,
                            Name = "Fen"
                        },
                        new
                        {
                            ToiletryID = 5,
                            Name = "Peškiri"
                        });
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.Administrator", b =>
                {
                    b.HasBaseType("RS1_2024_25.API.Data.Models.Auth.Account");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.ToTable("Administrator", (string)null);

                    b.HasData(
                        new
                        {
                            AccountID = 1,
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            LastName = "User",
                            Password = "AdminPass",
                            Username = "admin"
                        },
                        new
                        {
                            AccountID = 2,
                            Email = "superadmin@example.com",
                            FirstName = "Super",
                            LastName = "Admin",
                            Password = "SuperPass",
                            Username = "superadmin"
                        },
                        new
                        {
                            AccountID = 3,
                            Email = "izelrepuh@example.com",
                            FirstName = "Izel",
                            LastName = "Repuh",
                            Password = "SuperPass",
                            Username = "izelrepuh"
                        },
                        new
                        {
                            AccountID = 4,
                            Email = "amaromer@example.com",
                            FirstName = "Amar",
                            LastName = "Omer",
                            Password = "SuperAmar",
                            Username = "amaromer"
                        });
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.User", b =>
                {
                    b.HasBaseType("RS1_2024_25.API.Data.Models.Auth.Account");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CityID");

                    b.HasIndex("GenderID");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            AccountID = 5,
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "JohnPass",
                            Username = "johndoe",
                            CityID = 1,
                            CreatedAt = new DateTime(2025, 2, 28, 16, 30, 23, 393, DateTimeKind.Utc).AddTicks(3797),
                            GenderID = 1,
                            Phone = "+38761000111"
                        },
                        new
                        {
                            AccountID = 6,
                            Email = "janedoe@example.com",
                            FirstName = "Jane",
                            LastName = "Doe",
                            Password = "JanePass",
                            Username = "janedoe",
                            CityID = 2,
                            CreatedAt = new DateTime(2025, 2, 28, 16, 30, 23, 393, DateTimeKind.Utc).AddTicks(4118),
                            GenderID = 2,
                            Phone = "+38761000222"
                        },
                        new
                        {
                            AccountID = 7,
                            Email = "xxxx@example.com",
                            FirstName = "Xkorisnik",
                            LastName = "PKorisnik",
                            Password = "xxxxx",
                            Username = "xxxxx",
                            CityID = 3,
                            CreatedAt = new DateTime(2025, 2, 28, 16, 30, 23, 393, DateTimeKind.Utc).AddTicks(4157),
                            GenderID = 1,
                            Phone = "+38761000222"
                        },
                        new
                        {
                            AccountID = 8,
                            Email = "yyyy@example.com",
                            FirstName = "YYKorisnik",
                            LastName = "YYPrezime",
                            Password = "YYYXX",
                            Username = "yyyy",
                            CityID = 4,
                            CreatedAt = new DateTime(2025, 2, 28, 16, 30, 23, 393, DateTimeKind.Utc).AddTicks(4159),
                            GenderID = 2,
                            Phone = "+38761000222"
                        });
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Owner", b =>
                {
                    b.HasBaseType("RS1_2024_25.API.Data.Models.Auth.Account");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CityID");

                    b.HasIndex("GenderID");

                    b.ToTable("Owner", (string)null);

                    b.HasData(
                        new
                        {
                            AccountID = 9,
                            Email = "izel@gmail.com",
                            FirstName = "Izel",
                            LastName = "Repuh",
                            Password = "Izel",
                            Username = "Izel",
                            CityID = 1,
                            CreatedAt = new DateTime(2025, 2, 28, 16, 30, 23, 393, DateTimeKind.Utc).AddTicks(5933),
                            GenderID = 2,
                            Image = new byte[0],
                            Phone = "061-000-111"
                        },
                        new
                        {
                            AccountID = 10,
                            Email = "maida@gmail.com",
                            FirstName = "Maida",
                            LastName = "Kovac",
                            Password = "Maida",
                            Username = "Maida",
                            CityID = 2,
                            CreatedAt = new DateTime(2025, 2, 28, 16, 30, 23, 393, DateTimeKind.Utc).AddTicks(6157),
                            GenderID = 2,
                            Image = new byte[0],
                            Phone = "061-000-222"
                        },
                        new
                        {
                            AccountID = 11,
                            Email = "owner@gmail.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            Password = "Admin",
                            Username = "Admin",
                            CityID = 3,
                            CreatedAt = new DateTime(2025, 2, 28, 16, 30, 23, 393, DateTimeKind.Utc).AddTicks(6160),
                            GenderID = 1,
                            Image = new byte[0],
                            Phone = "061-000-333"
                        });
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Apartment", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Owner", "Account")
                        .WithMany("Apartments")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RS1_2024_25.API.Data.Models.City", "City")
                        .WithMany("Apartments")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("City");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.ApartmentAmenity", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Amenity", "Amenity")
                        .WithMany("ApartmentAmenities")
                        .HasForeignKey("AmenityID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Apartment", "Apartment")
                        .WithMany("ApartmentAmenities")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.ApartmentImage", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Apartment", "Apartment")
                        .WithMany("ApartmentImages")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Image", "Image")
                        .WithMany("ApartmentImages")
                        .HasForeignKey("ImageID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.ApartmentRule", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Apartment", "Apartment")
                        .WithMany("ApartmentRules")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Rule", "Rule")
                        .WithMany("ApartmentRules")
                        .HasForeignKey("RuleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.ApartmentToiletry", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Apartment", "Apartment")
                        .WithMany("ApartmentToiletries")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Toiletry", "Toiletry")
                        .WithMany("ApartmentToiletries")
                        .HasForeignKey("ToiletryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Toiletry");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Favorite", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.User", null)
                        .WithMany("Favorites")
                        .HasForeignKey("UserAccountID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.MyAuthenticationToken", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.TwoFactorAuth", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.Account", "Account")
                        .WithOne("TwoFactorAuth")
                        .HasForeignKey("RS1_2024_25.API.Data.Models.Auth.TwoFactorAuth", "AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.City", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.OwnerReview", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Owner", "Owner")
                        .WithMany("OwnerReviews")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.User", "User")
                        .WithMany("OwnerReviews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Reservation", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Apartment", "Apartment")
                        .WithMany("Reservations")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.User", null)
                        .WithMany("Reservations")
                        .HasForeignKey("UserAccountID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Review", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.User", null)
                        .WithMany("Reviews")
                        .HasForeignKey("UserAccountID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.Administrator", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.Account", null)
                        .WithOne()
                        .HasForeignKey("RS1_2024_25.API.Data.Models.Auth.Administrator", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.User", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.Account", null)
                        .WithOne()
                        .HasForeignKey("RS1_2024_25.API.Data.Models.Auth.User", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Owner", b =>
                {
                    b.HasOne("RS1_2024_25.API.Data.Models.Auth.Account", null)
                        .WithOne()
                        .HasForeignKey("RS1_2024_25.API.Data.Owner", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RS1_2024_25.API.Data.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Amenity", b =>
                {
                    b.Navigation("ApartmentAmenities");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Apartment", b =>
                {
                    b.Navigation("ApartmentAmenities");

                    b.Navigation("ApartmentImages");

                    b.Navigation("ApartmentRules");

                    b.Navigation("ApartmentToiletries");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Image", b =>
                {
                    b.Navigation("ApartmentImages");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.Account", b =>
                {
                    b.Navigation("TwoFactorAuth");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.City", b =>
                {
                    b.Navigation("Apartments");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Rule", b =>
                {
                    b.Navigation("ApartmentRules");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Toiletry", b =>
                {
                    b.Navigation("ApartmentToiletries");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Models.Auth.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("OwnerReviews");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("RS1_2024_25.API.Data.Owner", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("OwnerReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
